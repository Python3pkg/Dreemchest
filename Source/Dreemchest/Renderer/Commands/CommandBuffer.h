/**************************************************************************

 The MIT License (MIT)

 Copyright (c) 2015 Dmitry Sovetov

 https://github.com/dmsovetov

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:
 The above copyright notice and this permission notice shall be included in all
 copies or substantial portions of the Software.
 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 SOFTWARE.

 **************************************************************************/

#ifndef __DC_Renderer_CommandBuffer_H__
#define __DC_Renderer_CommandBuffer_H__

#include "../RenderState.h"
#include "OpCode.h"

DC_BEGIN_DREEMCHEST

namespace Renderer
{
    //! A command buffer that is generated by render pass and executed by RVM.
    class CommandBuffer
    {
    public:

        //! Returns a total number of recorded commands.
        s32                         size() const;

        //! Returns a command at specified index.
        const OpCode&               opCodeAt(s32 index) const;
        
        //! Clears a command buffer.
        void                        reset();

        //! Emits a command buffer execution command.
        void                        execute(const CommandBuffer& commands);
        
        //! Emits a constant buffer upload command.
        void                        uploadConstantBuffer(ConstantBuffer_ id, const void* data, s32 size);
        
        //! Emits a constant buffer upload command.
        void                        uploadConstantBuffer(ConstantBuffer_ id, const PersistentPointer& data, s32 size);
        
        //! Emits a vertex buffer upload command.
        void                        uploadVertexBuffer(VertexBuffer_ id, const void* data, s32 size);

        //! Emits a vertex buffer upload command.
        void                        uploadVertexBuffer(VertexBuffer_ id, const PersistentPointer& data, s32 size);

    protected:

                                    //! Constructs a CommandBuffer instance.
                                    CommandBuffer();

        //! Pushes a new command to a buffer.
        void                        push(const OpCode& opCode);
        
        //! Adopts a data buffer.
        OpCode::Buffer              adoptDataBuffer(const void* data, s32 size);

    private:

        Array<OpCode>               m_commands;                 //!< An array of recorded commands.
        List<u8*>                   m_data;                     //!< A list of adopted data pointers.
    };

    // ** CommandBuffer::size
    NIMBLE_INLINE s32 CommandBuffer::size() const
    {
        return static_cast<s32>(m_commands.size());
    }

    // ** CommandBuffer::opCodeAt
    NIMBLE_INLINE const OpCode& CommandBuffer::opCodeAt(s32 index) const
    {
        NIMBLE_ABORT_IF( index < 0 || index >= size(), "index is out of range" );
        return m_commands[index];
    }
    
    // ** CommandBuffer::push
    NIMBLE_INLINE void CommandBuffer::push(const OpCode& opCode)
    {
        if (m_commands.capacity() == m_commands.size())
        {
            s32 growBy = max2<s32>(5, m_commands.capacity() * 0.1f);
            m_commands.reserve(m_commands.capacity() + growBy);
        }
        
        m_commands.push_back(opCode);
    }

} // namespace Renderer

DC_END_DREEMCHEST

#endif    /*    !__DC_Renderer_CommandBuffer_H__    */
