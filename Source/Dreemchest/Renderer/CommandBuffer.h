/**************************************************************************

 The MIT License (MIT)

 Copyright (c) 2015 Dmitry Sovetov

 https://github.com/dmsovetov

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:
 The above copyright notice and this permission notice shall be included in all
 copies or substantial portions of the Software.
 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 SOFTWARE.

 **************************************************************************/

#ifndef __DC_Renderer_CommandBuffer_H__
#define __DC_Renderer_CommandBuffer_H__

#include "RenderState.h"

DC_BEGIN_DREEMCHEST

namespace Renderer
{
    //! A command buffer that is generated by render pass and executed by RVM.
    class CommandBuffer
    {
    friend class RenderFrame;
    public:
        
        //! A data buffer used by a command.
        struct Buffer
        {
            const u8*   data;           //!< A source data pointer.
            s32         size;           //!< A buffer size.
        };

        //! A single render operation.
        struct OpCode
        {
            //! An op-code type.
            enum Type
            {
                  DrawIndexed           //!< Draws a list of primitives using an index buffer.
                , DrawPrimitives        //!< Draws a list of primitives from an active vertex buffer.
                , Clear                 //!< Clears a render target.
                , Execute               //!< Executes a command buffer.
                , RenderTarget          //!< Begins rendering to a viewport.
                , UploadConstantBuffer  //!< Uploads data to a constant buffer.
                , UploadVertexBuffer    //!< Uploads data to a vertex buffer.
                , AcquireTexture        //!< Acquires a transient texture instance.
                , ReleaseTexture        //!< Releases a transient texture instance.
                , CreateInputLayout     //!< Creates a new input layout from a vertex declaration.
                , CreateVertexBuffer    //!< Creates a new vertex buffer object.
                , CreateIndexBuffer     //!< Creates a new index buffer object.
                , CreateConstantBuffer  //!< Creates a new constant buffer object.
                , CreateTexture         //!< Creates a new texture.
            };

            Type                                type;                       //!< An op code type.
            u64                                 sorting;                    //!< A sorting key.
            union
            {
                struct
                {
                    PrimitiveType               primitives;                 //!< A primitive type to be rendered.
                    s32                         first;                      //!< First index or primitive.
                    s32                         count;                      //!< A total number of indices or primitives to use.
                    const StateBlock*           states[MaxStateStackDepth]; //!< States from this stack are applied before a rendering command.
                } drawCall;

                struct
                {
                    u8                          mask;                       //!< A clear mask.
                    f32                         color[4];                   //!< A color buffer clear value.
                    f32                         depth;                      //!< A depth buffer clear value.
                    s32                         stencil;                    //!< A stencil buffer clear value.
                } clear;

                struct
                {
                    TransientResourceId         id;                         //!< A render target resource to be activated.
                    NormalizedViewport          viewport;                   //!< A viewport value to be set.
                    u8                          side;                       //!< A side of a cube map to render to.
                    const CommandBuffer*        commands;                   //!< A command buffer to be executed after setting a viewport.
                } renderToTextures;
                
                struct
                {
                    TransientResourceId         id;
                    u16                         width;
                    u16                         height;
                    PixelFormat                 format;
                    u8                          type;
                } transientTexture;

                struct
                {
                    const CommandBuffer*        commands;                   //!< A command buffer to be executed.
                } execute;

                struct
                {
                    ResourceId                  id;                         //!< A target buffer handle.
                    Buffer                      buffer;                     //!< An attached data buffer.
                } upload;
                
                struct
                {
                    ResourceId                  id;                         //!< Handle to an input layout being constructed.
                    u8                          format;                     //!< Vertex format used by an input layout constructor.
                } createInputLayout;
                
                struct
                {
                    ResourceId                  id;                         //!< Handle to a buffer object being constructed.
                    Buffer                      buffer;                     //!< An attached data buffer.
                    ResourceId                  layout;                     //!< Used by a constant buffer constructor.
                } createBuffer;
                
                struct
                {
                    ResourceId                  id;                         //!< Handle to a texture being constructed.
                    Buffer                      buffer;                     //!< An attached data buffer.
                    u16                         width;                      //!< A texture width.
                    u16                         height;                     //!< A texture height.
                    u8                          mipLevels;                  //!< A total number of mip levels stored in a data buffer.
                    PixelFormat                 format;                     //!< A texture format.
                    u8                          type;                       //!< A texture type to be created.
                } createTexture;
            };
        };

        //! Returns a total number of recorded commands.
        s32                         size( void ) const;

        //! Returns a command at specified index.
        const OpCode&               opCodeAt( s32 index ) const;
        
        //! Clears a command buffer.
        void                        reset( void );

        //! Emits a render target clear command.
        void                        clear( const Rgba& clearColor, u8 clearMask );

        //! Emits a command buffer execution command.
        void                        execute( const CommandBuffer& commands );
        
        //! Emits an acquire transient texture 2D command.
        TransientTexture            acquireTexture2D(u16 width, u16 height, PixelFormat format);
        
        //! Emits an acquire transient cube texture command.
        TransientTexture            acquireTextureCube(u16 size, PixelFormat format);
        
        //! Emits a release an transient render target command.
        void                        releaseTexture(TransientTexture id);

        //! Emits a rendering to a viewport of a specified render target command.
        CommandBuffer&              renderToTexture(RenderFrame& frame, TransientTexture id, const Rect& viewport = Rect(0.0f, 0.0f, 1.0f, 1.0f));
        
        //! Emits a command to start rendering to a viewport of a specified cube map side.
        CommandBuffer&              renderToCubeMap(RenderFrame& frame, TransientTexture id, u8 side, const Rect& viewport = Rect(0.0f, 0.0f, 1.0f, 1.0f));
        
        //! Emits a rendering to a viewport.
        CommandBuffer&              renderToTarget( RenderFrame& frame, const Rect& viewport = Rect( 0.0f, 0.0f, 1.0f, 1.0f ) );

        //! Emits a constant buffer upload command.
        void                        uploadConstantBuffer( ConstantBuffer_ id, const void* data, s32 size );

        //! Emits a vertex buffer upload command.
        void                        uploadVertexBuffer( VertexBuffer_ id, const void* data, s32 size );

        //! Emits a draw indexed command that inherits all rendering states from a state stack.
        void                        drawIndexed( u32 sorting, PrimitiveType primitives, s32 first, s32 count, const StateStack& stateStack );
        
        //! Emits a draw indexed command with a single render state block.
        void                        drawIndexed( u32 sorting, PrimitiveType primitives, s32 first, s32 count, const StateBlock* stateBlock );

        //! Emits a draw primitives command that inherits all rendering states from a state stack.
        void                        drawPrimitives( u32 sorting, PrimitiveType primitives, s32 first, s32 count, const StateStack& stateStack );
        
        //! Emits a draw primitives command that inherits all rendering states from a state stack.
        void                        drawPrimitives( u32 sorting, PrimitiveType primitives, s32 first, s32 count, const StateBlock* stateBlock );

    protected:

                                    //! Constructs a CommandBuffer instance.
                                    CommandBuffer( void );
        
        //! Emits a draw call command.
        void                        emitDrawCall( OpCode::Type type, u32 sorting, PrimitiveType primitives, s32 first, s32 count, const StateBlock** states, s32 stateCount );
        
        //! Pushes a new command to a buffer.
        void                        push(const OpCode& opCode);
        
        //! Adopts a data buffer.
        Buffer                      adoptDataBuffer(const void* data, s32 size);

    private:

        Array<OpCode>               m_commands;                 //!< An array of recorded commands.
        List<u8*>                   m_data;                     //!< A list of adopted data pointers.
        u8                          m_transientResourceIndex;   //!< A transient resource index relative to a current stack offset.
    };

    // ** CommandBuffer::size
    NIMBLE_INLINE s32 CommandBuffer::size( void ) const
    {
        return static_cast<s32>( m_commands.size() );
    }

    // ** CommandBuffer::opCodeAt
    NIMBLE_INLINE const CommandBuffer::OpCode& CommandBuffer::opCodeAt( s32 index ) const
    {
        NIMBLE_ABORT_IF( index < 0 || index >= size(), "index is out of range" );
        return m_commands[index];
    }

} // namespace Renderer

DC_END_DREEMCHEST

#endif    /*    !__DC_Renderer_CommandBuffer_H__    */
